---
- name: Install wireguard (apt)
  apt:
    update_cache: yes
    state: present
    name: wireguard

- name: Ensure wireguard_path exists as directory
  file:
    path: "{{ wireguard_path }}"
    state: directory

- name: Read private key
  tags: test
  stat:
    path: "{{ wireguard_path }}/{{ wireguard_network_name }}_privatekey"
  register: privatekey

- name: Generate wireguard keys
  tags: test
  shell: set -o pipefail && \
         umask 077; wg genkey | tee {{ wireguard_path  }}/{{ wireguard_network_name }}_privatekey | wg pubkey > {{ wireguard_path }}/{{ wireguard_network_name }}_publickey
  args:
    executable: /bin/bash
  when:
    - not privatekey.stat.exists

- name: Read private key
  tags: test
  slurp:
    src: "{{ wireguard_path }}/{{ wireguard_network_name }}_privatekey"
  register: private

- name: Read public key
  tags: test
  slurp:
    src: "{{ wireguard_path }}/{{ wireguard_network_name }}_publickey"
  register: public

- name: Patch wg-quick service
  copy:
    dest: "/lib/systemd/system/wg-quick@.service"
    src: wg-quick@.service
  notify:
    - daemon-reload

- name: Patch wg-quick
  copy:
    dest: "/usr/bin/wg-quick"
    src: wg-quick

- name: Generate configs (first time)
  template:
    src: interface.conf.j2
    dest: "{{ wireguard_path }}/{{ wireguard_network_name }}.conf"
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  notify:
    - Enable wg-quick service
    - Restart wg-quick service
  when:
    - not privatekey.stat.exists

- name: Generate configs (update)
  tags: test
  template:
    src: interface.conf.j2
    dest: "{{ wireguard_path }}/{{ wireguard_network_name }}.conf"
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  notify:
    - Reload wg-quick service
  when:
    - privatekey.stat.exists

- name: Generate supernets configs
  template:
    src: supernets.j2
    dest: "{{ wireguard_path }}/{{ wireguard_network_name }}_supernets"
    owner: root
    group: root
    mode: "u=rw,g=r,o="
  notify:
    - Reload wg-quick service
